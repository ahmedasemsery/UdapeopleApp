version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
      event:
        type: string   
    steps:
      - run:
          name: Destroy environments << parameters.workflow_id >>
          when: << parameters.event >>
          command: |
            echo "Destroy environments << parameters.workflow_id >> "
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
  
  revert-migrations:
      description: Revert the last migration if successfully run in the current workflow.
      parameters:
        workflow_id:
          type: string
          default:   ${CIRCLE_WORKFLOW_ID:0:7}
        event:
          type: string
      steps:
        - run:
            name: Revert migrations
            when: << parameters.event >>
            command: |
              SUCCESS=$(curl --insecure  https://kvdb.io/8Vr9FttyXpAYE351BX4p45/migration_<<parameters.workflow_id>>)
              if(( $SUCCESS==1 )); 
              then
                cd ~/project/backend
                npm install
                npm run migration:revert
              fi

  aws-cli:
      description: commend for installing aws
      steps:
        - run:
            name: Install aws cli
            command: |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install

  node-js:
      description: for install Node.js 13
      steps:
        - run:
            name: Node.js 13
            command: |
              curl fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
              sudo apt-get install -y node.js

jobs:
  build-frontend:
    environment:
      CODE: 123
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            echo $CODE
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          mentions: '@Asem'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
  
  configure-infrastructure:
    docker:
     - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm ansible zip
            pip install awscli
      - add_ssh_keys:
          fingerprints: ["d5:c0:bc:1e:6b:98:ef:87:b7:4d:80:7a:39:16:88:1e"]
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
            cat inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail

  run-migrations:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - attach_workspace:
            at: ~/
        - run:
            name: Run migrations
            command: |
              cd backend
              npm install
              npm run migrations > migrations_dump.txt
              cat migrations_dump.txt
        - run:
            name: Send migration results to kvdb.io
            command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                curl --insecure -d '1' https://kvdb.io/8Vr9FttyXpAYE351BX4p45/migration_${CIRCLE_WORKFLOW_ID:0:7}
              fi
        - destroy-environment:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
            event: on_fail
        - revert-migrations:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
            event: on_fail

  deploy-frontend:
      docker:
        - image: cimg/base:stable
      steps:
        - checkout
        - aws-cli
        - node-js
        - run:
            name: Install dependencies
            command: |
              cd frontend
              npm install
        - run:
            name: Get backend url
            command: |
              export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query=Reservations[].Instances[].PublicIpAddress --output text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "API_URL = ${API_URL}"
              echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
              cat frontend/.env
        - run:
            name: Deploy frontend objects
            command: |
              cd frontend
              npm install
              npm run build
              tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
              aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
        - destroy-environment:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
            event: on_fail
        - revert-migrations:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
            event: on_fail

  deploy-backend:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: [ "d5:c0:bc:1e:6b:98:ef:87:b7:4d:80:7a:39:16:88:1e" ]
        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies
            command: |
              apk add --update curl nodejs npm ansible zip
              pip install awscli
        - run:
            name: Deploy backend
            command: |
              cd backend
              npm i
              npm run build
              cd ..
              tar -C backend -czvf artifact.tar.gz .
              cp ./artifact.tar.gz  .circleci/ansible/roles/deploy/files
              cd .circleci/ansible
              cat inventory.txt
              ansible-playbook -i inventory.txt deploy-backend.yml
        - destroy-environment:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
            event: on_fail
        - revert-migrations:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
            event: on_fail

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [ configure-infrastructure ]
      - deploy-frontend:
          requires: [ run-migrations ]
      - deploy-backend:
          requires: [ run-migrations ]